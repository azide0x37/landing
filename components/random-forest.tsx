"use client"

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/iWuKGKKjHBQ
 */
import { Avatar } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { useEffect, useState } from "react"

export type Upgrade = {
  name: string
  description: string
  cost: number
  multiplier: number
}

export type Ally = {
  name: string
  description: string
  cost: number
  rate: number
}

const upgrades: Upgrade[] = [
  {
    name: "Double Axe",
    description: "An axe with a blade on each side -- less time swinging, more time chopping!",
    cost: 50,
    multiplier: 5,
  },
  {
    name: "Chainsaw",
    description: "Gas-powered, gear-driven, and loud as hell. It's a chainsaw!",
    cost: 5000,
    multiplier: 10,
  },
  {
    name: "Lumber Mill",
    description: "The trees are stacking up! Build a mill to process them faster.",
    cost: 50000,
    multiplier: 100,
  },
  {
    name: "Glue Laminated Beams",
    description: "The ultimate in engineered wood products -- stronger than steel; lighter than concrete. Sells like hotcakes!",
    cost: 100000,
    multiplier: 1000,
  },
  {
    name: "Lumberjack Robot",
    description: "A robot that chops trees. What could go wrong?",
    cost: 1000000,
    multiplier: 10000,
  },
  {
    name: "Orbital Lumberjack Laser",
    description: "Each blast from this laser turns a forest into a parking lot. The ultimate in deforestation technology.",
    cost: 10000000,
    multiplier: 100000,
  },
  {
    name: "Nano-Diamond Filament Flail",
    description: "A flail with a kilometer long nano-diamond filament chain. It's like a chainsaw...but better.",
    cost: 100000000,
    multiplier: 1000000,
  },
]

const allies: Ally[] = [
  {
    name: "Beaver",
    description: "Chops 1 tree per second",
    cost: 100,
    rate: 1,
  },
  {
    name: "Lumberjack",
    description: "Chops 10 trees per second",
    cost: 5000,
    rate: 10,
  },
  {
    name: "Lumberjack Union",
    description: "Chops 100 trees per second",
    cost: 50000,
    rate: 100,
  },
  {
    name: "Lumberjack Army",
    description: "Chops 1000 trees per second",
    cost: 100000,
    rate: 1000,
  },
]


export type NewsItem = string

export function RandomForest() {
  const [treesRemaining, setTreesRemaining] = useState(4000000000000)
  const [treeGrowRate, setTreeGrowRate] = useState(5)
  const [treesChoppedPerClick, setTreesChoppedPerClick] = useState(1)
  const [treesChopped, setTreesChopped] = useState(0)

  const [purchasedAllies, setPurchasedAllies] = useState<Ally[]>([])

  const [purchasedUpgrades, setPurchasedUpgrades] = useState<Upgrade[]>([])
  const [news, setNews] = useState<string[]>([])
  const [seconds, setSeconds] = useState(0)

  useEffect(() => {
    const interval = setInterval(() => {
      setSeconds(seconds => seconds + 1)
    }, 1000)
    return () => clearInterval(interval)
  }, [])

  useEffect(() => {
    if (seconds % 5 === 0) {
      setTreesRemaining(treesRemaining => treesRemaining + treeGrowRate)
    }

    // process all ally chops
    processAlliesChops()

  }, [seconds])



  function processAlliesChops() {
    // get total chops per second from allies
    const chopsPerSecond = purchasedAllies.reduce((total, ally) => {
      return total + ally.rate
    }, 0)

    // chop trees at that rate
    setTreesChopped(treesChopped => treesChopped + chopsPerSecond)
    setTreesRemaining(treesRemaining => treesRemaining - chopsPerSecond)
  }



  const newsItems: NewsItem[] = [
    "Breaking: Squirrel population booms as tree chopping continues!",
    "News Flash: Lumberjack spotted wearing flannel. More at 11.",
    "Update: New strain of tree discovered, requires 10x chopping power!",
    "Breaking: Lumberjack union demands more pay for tree chopping!",
  ]

  function chopTree() {
    setTreesChopped(treesChopped + treesChoppedPerClick)
    setTreesRemaining(treesRemaining - treesChoppedPerClick)
  }

  function buyUpgrade(upgrade: Upgrade) {
    setTreesChopped(treesChopped - upgrade.cost)
    setTreesChoppedPerClick(treesChoppedPerClick * upgrade.multiplier)
    setPurchasedUpgrades([...purchasedUpgrades, upgrade])
    setNews([...news, newsItems[Math.floor(Math.random() * newsItems.length)]])
  }

  function allyChop(ally: Ally) {
    // allies chop trees at a rate of ally.rate per second. Generate a function that
    // chops trees at that rate using setInterval, and returns a function that
    return () => {
      setTreesChopped(treesChopped + ally.rate)
      setTreesRemaining(treesRemaining - ally.rate)
    }
  }

  function hireAlly(ally: Ally) {
    setTreesChopped(treesChopped - ally.cost)
    setPurchasedAllies([...purchasedAllies, ally])
  }


  return (
    <div className="flex h-screen w-screen bg-green-50">
      <main className="flex flex-col items-center justify-center w-4/5">
        <h1 className="text-4xl font-bold mb-4">RandomForest Clicker Game</h1>
        <div className="flex flex-col items-center space-y-4">
          <Button
            onClick={() => {
              chopTree()
            }}
            className="bg-green-600 text-white px-16 py-8 rounded-full shadow-2xl hover:bg-green-700 transition-colors">
            Chop Tree
            <AxeIcon className="w-8 h-8 ml-2" />
          </Button>
          <div className="flex items-center space-x-4">
            <h2 className="text-3xl font-semibold">Trees Chopped:</h2>
            <Badge className="h-12 px-6 text-2xl font-bold bg-green-200 text-green-700 rounded-full">
              {treesChopped}
            </Badge>
          </div>
          <div className="flex items-center space-x-4">
            <h2 className="text-3xl font-semibold">Trees Per Click:</h2>
            <Badge className="h-12 px-6 text-2xl font-bold bg-green-200 text-green-700 rounded-full">
              {treesChoppedPerClick}
            </Badge>
          </div>
          <div className="flex items-center space-x-4">
            <h2 className="text-3xl font-semibold">Trees Per Second:</h2>
            <Badge className="h-12 px-6 text-2xl font-bold bg-green-200 text-green-700 rounded-full">
              {purchasedAllies.reduce((total, ally) => {
                return total + ally.rate
              }, 0)}
            </Badge>
          </div>
        </div>
        <div className="flex flex-row space-x-4">
          <section className="mt-10 w-full max-w-2xl mx-auto space-y-4">
            <h2 className="text-2xl font-semibold text-center">Upgrades</h2>
            {
              // show next two upgrades if available and not already purchased
              upgrades
                .filter(upgrade => {
                  return !purchasedUpgrades.find(purchased => purchased.name === upgrade.name)
                })
                .slice(0, 3)
                .map(upgrade => (
                  <Card
                    key={upgrade.name}
                    className="flex items-center justify-between p-4 bg-white shadow-lg rounded-lg">
                    <div className="flex items-center space-x-4">
                      <Avatar className="w-12 h-12 rounded-full" />
                      <div>
                        <h3 className="text-lg font-medium">{upgrade.name}</h3>
                        <p className="text-sm text-gray-600">{upgrade.description}</p>
                      </div>
                    </div>
                    <Button
                      disabled={treesChopped < upgrade.cost}
                      onClick={() => buyUpgrade(upgrade)}
                      className="bg-green-600 text-white px-4 py-2 rounded-md shadow hover:bg-green-700 transition-colors">
                      Buy for {upgrade.cost}
                      <CurrencyIcon className="w-4 h-4 ml-1" />
                    </Button>
                  </Card>
                ))
            }
          </section>

          <section className="mt-10 w-full max-w-2xl mx-auto space-y-4">
            <h2 className="text-2xl font-semibold text-center">Allies</h2>
            {
              // show next two levels of unpurchased allies
              allies
                .map(ally => (
                  <Card
                    key={ally.name}
                    className="flex items-center justify-between p-4 bg-white shadow-lg rounded-lg">
                    <div className="flex items-center space-x-4">
                      <Avatar className="w-12 h-12 rounded-full" />
                      <div>
                        <h3 className="text-lg font-medium">{ally.name}</h3>
                        <p className="text-sm text-gray-600">{ally.description}</p>
                      </div>
                    </div>
                    <Button
                      disabled={treesChopped < ally.cost}
                      onClick={() => hireAlly(ally)}
                      className="bg-teal-600 text-white px-4 py-2 rounded-md shadow hover:bg-teal-700 transition-colors">
                      Hire for {ally.cost}
                      <CurrencyIcon className="w-4 h-4 ml-1" />
                    </Button>
                  </Card>
                ))

            }
          </section>
        </div>
      </main>
      <aside className="w-1/5 p-4 bg-white border-l border-green-200">
        <section className="w-full space-y-4">
          <h2 className="text-2xl font-semibold text-center">Trees Remaining</h2>
          <Card className="flex items-center justify-between p-4 bg-white shadow-lg rounded-lg">
            <div className="flex items-center space-x-4">
              <Avatar className="w-12 h-12 rounded-full" />
              <div>
                <h3 className="text-lg font-medium">Planet Earth</h3>
                <p className="text-sm text-gray-600">Count of trees remaining</p>
              </div>
            </div>
            <Badge className="h-12 px-6 text-2xl font-bold bg-green-200 text-green-700 rounded-full">
              {treesRemaining}
            </Badge>
          </Card>
        </section>
        <section className="mt-10 w-full space-y-4">
          <h2 className="text-2xl font-semibold text-center">News Ticker</h2>
          {
            // show last 5 news items
            news.slice(-5).map(item => (
              <Card
                key={item}
                className="p-4 bg-white shadow-lg rounded-lg">
                <p className="text-sm text-gray-600">{item}</p>
              </Card>
            ))
          }
        </section>
      </aside>
    </div>
  )
}


function AxeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9" />
      <path d="M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z" />
    </svg>
  )
}


function CurrencyIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="8" />
      <line x1="3" x2="6" y1="3" y2="6" />
      <line x1="21" x2="18" y1="3" y2="6" />
      <line x1="3" x2="6" y1="21" y2="18" />
      <line x1="21" x2="18" y1="21" y2="18" />
    </svg>
  )
}
